假设生成一个自然数需要200毫秒的时间，对自然数取平方需要500毫秒的时间，而输出一个自然数需要300毫秒的时间，请修改上一页的程序，让输出所有数字所需时间最小。
提示一：可以用time.Sleep(200 * time.Millisecond)来模拟时间消耗了200毫秒；
要求一：在goroutine的阻塞时间最小同时，请尽量减少内存花费；
要求二：请说明你的程序输出每一个数字所需的时间是多少。

由于生成一个自然数需要200毫秒的时间，对自然数取平方需要500毫秒的时间，因此为了让生成一个自然数能够被取平方操作及时处理，squarer至少应该创建3个goroutine(goroutine11,goroutine12,goroutine13)进行并发操作，并为每一个goroutine创建一个channel(共3个)与之相对应，分别命名为ch11,ch12,ch13。生成操作在生成自然数x后，按顺序依次放入到3个channel中，即x%3==0放入ch11中，x%3==1放入ch12中，x%3==2放入ch13中，将全部数据放完之后关闭3个channel。每个取平方操作的goroutine会从对应的channel只取出自然数进行求平方操作，然后传给下个阶段的channel。
由于对自然数取平方需要500毫秒的时间，而输出一个自然数需要300毫秒的时间，此时取平方操作已开了3个goroutine进行并发操作，平均每个操作时间为500/3=167ms，为了让打印操作能够即时打印，应该为打印操作创建2个goroutine(goroutine21,goroutine22)进行并发操作，并为每个打印操作goroutine创建一个channel与之对应，分别命名为ch21,ch22。求平方goroutine从对应的channel(ch11,ch12,ch13)中取出数据进行求平方操作后，将结果放到对应的ch2i(i=1,2)中，规则为:3个求平方操作goroutine将结果轮流放到ch21和ch22中，第1个goroutine将其第一个结果放到ch21，第2个goroutine将其第一个结果放到ch22，之后ch21中的数据已被打印操作的goroutine取出，因此第3个goroutine将其第一个结果放到ch21，之后第1个goroutine将其第二个结果放到ch22，如此反复执行。最后一个自然数x=99放在ch11中，求平方操作将其取出后，放到对应的下一个阶段的channel中，并将ch21,ch22关闭。
2个并发的打印操作会从与之相对应的ch21,ch22中取出数据，并且打印。程序开始执行后，除看到第一个数据的打印要历时200+500+300ms，之后的数据都是每隔200ms打印一次。